package com.example.UserServiceCapstone.models;

import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.MappedSuperclass;
import lombok.Getter;
import lombok.Setter;

import java.util.Date;

@Getter
@Setter
@MappedSuperclass
public class BaseModel {
    @Id
    // Assuming the ID is generated by the database, you can use @GeneratedValue annotation if needed
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private Date createdAt;
    private Date lastModifiedAt;
    private Boolean deleted;
}

//4 ways of representing inheritance in database:
// 1. Single Table Inheritance: All classes in the hierarchy are stored in a single table with a discriminator column to differentiate between types.

//2.mapped superclass: The base class is mapped to a table, and subclasses are mapped to separate tables with a foreign key relationship to the base class.No parent class table is created, and the fields of the base class are included in the subclass tables.

//3. Table per Class: Each class in the hierarchy is mapped to its own table, and the base class's fields are duplicated in each subclass's table.

//4. Joined Table Inheritance: The base class is mapped to its own table, and each subclass has its own
